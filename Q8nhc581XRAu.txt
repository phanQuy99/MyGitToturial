Q8nhc581XRAu


chmod +x qt-opensource-linux-x64-5.9.0.run
./qt-opensource-linux-x64-5.9.0.run

================================================
objdump -D day_04 | grep -A 30 main\>
functional in c++
https://en.cppreference.com/w/cpp/utility/functional/function

==================================================
- What is function?
- Parameter vs Argument
- Pass by value, pointer and reference
+ pass by pointer is pass by value, but what is benefit of pass by pointer?
+ pass by reference benefit
- Default arguments
- Thread-safe, reentrant function
- Return value, reference, pointer
+ value is good enough for almost cases.
+ reference/pointer
--> Life cycle must be considered carefully.
--> Do not return reference/pointer of local variables.
- Function pointer
+ contain address of function (a lable in assembly)
+ syntax
+ application
- Overloading function
+ how to?
+ how about return type? --> https://www.geeksforgeeks.org/function-overloading-and-return-type-in-cpp/
- Inline function
+ Refs:
* https://www.geeksforgeeks.org/inline-functions-cpp/?ref=gcse
* https://gcc.gnu.org/onlinedocs/gcc/Inline.html
--> GCC does not inline any functions when not optimizing unless you specify the ‘always_inline’ attribute for the function
+ purpose of inline function --> reduce function call (jumping)
+ substitude code "inline" function position --> done at compile time.
+ compiler can ignore "inline" when compiling source code.
+ Compare to MACRO
- macros are managed by preprocessor (part of compiler)
- inline functions are managed by C++ compiler
+ In Linux, using "objdump" to see assembly code